pool:
  name: MyAzurVM
  demands:
  - Agent.OS -equals Windows_NT

trigger:
- master   # change if your branch is main

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)\publish'
  sitePath: 'C:\inetpub\wwwroot\MyFirstwebAPI'
  appPool:  'MyFirstwebAPI'

steps:
# Install the exact SDK requested by your repo (global.json), incl. previews if needed
- task: UseDotNet@2
  displayName: 'Install .NET SDK from global.json'
  inputs:
    packageType: 'sdk'
    useGlobalJson: true
    includePreviewVersions: true

# If you DON'T have a global.json, comment the block above and use this instead:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(publishDir)'
    zipAfterPublish: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact'
  inputs:
    PathtoPublish: '$(publishDir)'
    ArtifactName: 'drop'
  condition: succeeded()

# === Deploy to IIS on the SAME VM ===
- task: PowerShell@2
  displayName: 'Deploy to IIS (stop-copy-start)'
  inputs:
    targetType: 'inline'
    script: |
      Import-Module WebAdministration
      $pool = "$(appPool)"
      $dst  = "$(sitePath)"
      if (!(Test-Path $dst)) { New-Item -ItemType Directory -Path $dst -Force | Out-Null }
      Set-ItemProperty "IIS:\AppPools\$pool" -Name managedRuntimeVersion -Value '' -ErrorAction SilentlyContinue
      Stop-WebAppPool -Name $pool -ErrorAction SilentlyContinue
      robocopy "$(publishDir)" "$dst" /MIR /R:2 /W:2 | Out-Null
      Start-WebAppPool -Name $pool