pool:
  name: MyAzurVM

trigger:
- master   # change if your branch is main

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)\publish'
  sitePath: 'C:\inetpub\wwwroot\MyFirstwebAPI'
  appPool:  'MyFirstwebAPI'
  project: '**/*.csproj'    # or set to your Web API .csproj path

steps:
# Verify the SDK your agent already has
- powershell: |
    $cmd = Get-Command dotnet -ErrorAction SilentlyContinue
    if (-not $cmd) {
      Write-Error "dotnet SDK not found in PATH. Install it system-wide or add 'C:\Program Files\dotnet' to PATH for the agent service."
      exit 1
    }
    dotnet --info
  displayName: 'Verify .NET SDK on agent'

# (Safe even if you only use nuget.org)
- task: NuGetAuthenticate@1
  displayName: 'Authenticate NuGet feeds'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '$(project)'
    arguments: '--verbosity minimal'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration) --no-build --output $(publishDir)'
    zipAfterPublish: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact'
  inputs:
    PathtoPublish: '$(publishDir)'
    ArtifactName: 'drop'
  condition: succeeded()

# === Deploy to IIS on the SAME VM ===
- task: PowerShell@2
  displayName: 'Deploy to IIS (stop-copy-start)'
  inputs:
    targetType: 'inline'
    script: |
      Import-Module WebAdministration
      $pool = "$(appPool)"
      $dst  = "$(sitePath)"
      if (!(Test-Path $dst)) { New-Item -ItemType Directory -Path $dst -Force | Out-Null }
      Set-ItemProperty "IIS:\AppPools\$pool" -Name managedRuntimeVersion -Value '' -ErrorAction SilentlyContinue
      Stop-WebAppPool -Name $pool -ErrorAction SilentlyContinue
      robocopy "$(publishDir)" "$dst" /MIR /R:2 /W:2 | Out-Null
      Start-WebAppPool -Name $pool